10            cls :cursor off 15            mousespeed#=0.7520            i=0:sx=5:sy=5:xo=sx*4:yo=sy*3:scount=0:smax=0:grid=030            brush=0:grid=0:size=32:rem "set sprite initial size"35            long=alloc(3)40            ?1=0:?$D000=31:peekvalue=0:sprites on 50            bitmap on :bitmap clear 060            lut=$D000:sz=4-(size\8):sprsize=(size\8)-1:dim rowbuf(32):rem "sz 3=8,2=16,1=24,0=32"70            for c=0 to 25580            read r,g,b90            palette c,r,g,b100           next 110           col=1:brush=0120           memcopy $30000,$FC00 poke 0:memcopy $7800,1024 poke 0130           work2=$7800:work3=$2FC00140           sprcursor()150           memcopy work2,1024 to $22C00160           rem "REGISTER SPRITES IN INDEX"170           address=$30800:pokel long,address+sprsize180           memcopy long,3 to $30000+(scount*3)190           setspr(0,$22D00,2,1)200           setspr(1,$22C00,2,1)210           setspr(5,$22C00,2,1)220           setspr(6,$22C00,2,1)230           setspr(7,$22C00,2,1)240           for c=0 to 1023:?(work2+c)=0:next 250           ptrx=32+xo+(sx*20):ptry=32+yo+(sy*16)260           movespr(0,ptrx,ptry)270           setspr(2,work2,sz,1)280           movespr(2,272,122)290           ml_routines():rem "Compile mlRoutines"300           ?(l+4)=0310           col=8320           rect solid sx*4,(sy*40)+1 colour 248 to (sx*5)+255,(sy*41)330           rect solid sx*4,(sy*42)+1 colour 251 to (sx*5)+255,(sy*43)340           rect solid sx*4,(sy*44)+1 colour 252 to (sx*5)+255,(sy*45)350           drawpal()360           line (xo+1),(yo+1) color 72 to (xo+sx-1),(yo+sy-1)370           clrarea(size)380           switchcolor(32)390           drawnexticon(2,20,243):drawnexticon(2,36,243)400           drawnexticon(2,52,243):drawnexticon(2,68,243)410           drawnexticon(2,84,243):drawnexticon(2,100,243)420           drawnexticon(2,116,243):drawnexticon(2,132,243)430           drawnexticon(264,180,243):drawnexticon(244,180,243):rem "palette icons"440           drawnexticon(64,180,243):drawnexticon(84,180,243):drawnexticon(104,180,243)450           drawnexticon(124,180,243):drawnexticon(144,180,243):drawnexticon(164,180,243)460           drawnexticon(184,180,243):drawnexticon(203,180,243)470           printat(0,0,"Welcome to F256 Jr Sprite's Editor v1.2")500           '	"--------------- MAIN LOOP -------------------------"510           getmouse()520           if dx+dy+dz+mb1+mb2+mb3<>0530           ptrx=ptrx+dx:ptry=ptry+dy:b1=mb1:b2=mb2:mflg=true 540           else 550           processjoy()560           ptrx=ptrx+int(x#):ptry=ptry+int(y#)570           endif 580           if ptrx>351 then ptrx=351590           if ptry>271 then ptry=271600           if ptrx<32 then ptrx=32610           if ptry<32 then ptry=32620           movespr(0,ptrx,ptry)630           xc=int((ptrx-32)/sx):yc=int((ptry-32)/sy)640           if b1=0 then goto 4130650           if yc>=40:rem "---------------Modify palette entry"660           ?1=1:l=$D000:l=l+(col*4)670           if col<>0680           colb=?l:colg=?(l+1):colr=?(l+2)690           else 700           ?1=0:colb=?$D00D:colg=?$D00E:colr=?$D00F710           endif 720           if xc<4 then goto 500730           if xc<56740           if yc=40750           colr=ptrx-(4*sx)-32780           if colr>=255 then colr=255790           if colr<=0 then colr=0800           movespr(5,sx*4+colr+32,sy*40+32)810           endif 820           if yc=42830           colg=ptrx-(4*sx)-32840           if colg>=255 then colg=255850           if colg<=0 then colg=0860           movespr(6,sx*4+colg+32,sy*42+32)870           endif 880           if yc=44890           colb=ptrx-(4*sx)-32900           if colb>=255 then colb=255910           if colb<=0 then colb=0920           movespr(7,sx*4+colb+32,sy*44+32)930           endif 940           a$="Red:"+right$("00"+str$(colr),3)+" "950           a$=a$+"Green:"+right$("00"+str$(colg),3)+" "960           a$=a$+"Blue:"+right$("00"+str$(colb),3)970           printat(5,58,a$)980           if col<>0990           palette col,colr,colg,colb1000          else 1010          ?1=0:?$D00D=colb:?$D00E=colg:?$D00F=colr1020          endif 1030          endif 1040          goto 5001050          endif 1060          if yc>34:rem "DRAW TOOLS MENU"1070          processjoy():if b1=1 then goto 10701075          getmouse()1076          if mb1<>0 then goto 10751080          if xc<13 then goto 5001090          if xc<16:rem "SET BRUSH SIZE"1100          brush=brush+11110          if brush>3 then brush=01120          a$=str$(brush+1):printat(16,48,a$)1130          goto 5001140          endif 1150          if xc<20:rem "COPY SPRITE TO BUFFER"1160          memcopy work2,size*size to work31170          setspr(3,work3,sz,1)1180          movespr(3,318,233)1190          a$="Copied sprite "+str$(scount+1)+" to buffer"1200          printat(72,49,"Buffer:"):bufsize=size1210          statmsg(a$)1220          goto 5001230          endif 1240          if xc<24:rem "PASTE SPRITE FROM BUFFER"1250          if size=bufsize1260          memcopy work3 rect bufsize,bufsize by size to work21270          a$="Pasted Sprite "+str$(scount+1)+" from buffer"1280          call sprshow1290          printat(0,0,a$)1300          goto 5001310          else 1320          a$="Sprite needs to be size "+str$(bufsize)+"x"+str$(bufsize)+" to be able to Paste buffer":statmsg(a$)1330          goto 5001340          endif 1350          endif 1360          if xc<28:rem "CLEAR SPRITE"1370          statmsg("Press button/enter to clear sprite, move stick or press other key to cancel.")1380          k=inkey():processjoy():if x#+y#+b1+k=0 then goto 13801390          if k=13 then goto 14101400          if b1=11410          memcopy work2,size*size poke 01420          a$="Cleared Sprite "+str$(scount)+" from work area."1430          call sprshow1440          else 1450          a$="Operation Canceled."1460          endif 1470          statmsg(a$)1480          goto 5001490          endif 1500          if xc<32:rem "SET GRID SIZE"1510          if grid>01520          gspace=4:b=01530          while b<=size1540          line xo+b*sx,yo color 3 to xo+b*sx,yo+sy*size1550          line xo,yo+b*sy color 3 to xo+sx*size,yo+sy*b1560          b=b+gspace1570          wend 1580          endif 1590          grid=grid+11600          a$=str$(grid&3):printat(36,48,a$):rem "1550"1610          if grid=41620          grid=0:goto 5001630          endif 1640          gspace=2:b=01650          for c=1 to grid1660          gspace=gspace*21670          next 1680          while b<=size1690          line xo+b*sx,yo color 250 to xo+b*sx,yo+sy*size1700          line xo,yo+b*sy color 250 to xo+sx*size,yo+sy*b1710          b=b+gspace1720          wend 1730          goto 5001740          endif 1750          if xc<36:rem "MIRROR SPRITE X"1760          call mirrorx1770          call sprshow1780          goto 5001790          endif 1800          if xc<40:rem "MIRROR SPRITE Y"1810          call mirrory1820          call sprshow1830          goto 5001840          endif 1850          if xc<44:rem "MOVE (SCROLL) SPRITE"1860          a$="Use joystick or cursor keys to move sprite, button or Enter to end":statmsg(a$)1870          processjoy():k=inkey()1880          if b1+x#+y#+k=0 then goto 1870:rem "GET DEVICE INPUT"1890          if k<>131900          if b1=01910          showspr(2,0,sprsize)1920          if x#=1 call mirrorx:leftscroll():call mirrorx:endif :rem "Right"1930          if k=6 call mirrorx:leftscroll():call mirrorx:endif :rem "Right"1940          if x#=-1 then leftscroll():rem "Left"1950          if k=2 then leftscroll():rem "Left"1960          if y#=1 call mirrory:upscroll():call mirrory:endif :rem "Down"1970          if k=14 call mirrory:upscroll():call mirrory:endif :rem "Down"1980          if y#=-1 then upscroll():rem "Up"1990          if k=16 then upscroll():rem "Up"2000          x#=0:y#=0:b1=0:call sprshow2010          else 2020          a$="Sprite Adjusted!":statmsg(a$):showspr(2,1,sz)2030          processjoy():if b1+x#+y#=0 then goto 20302040          goto 5002050          endif 2060          else 2070          a$="Sprite Adjusted!":statmsg(a$):showspr(2,1,sz):goto 5002080          endif 2090          goto 18702100          endif 2120          if xc<48 then goto 5002130          if xc<52:rem "LOAD PALETTE"2140          cls :cursor on :input "Palette file Name to Load (.PAL will be added):";a$2150          hidespr():a$=a$+".PAL":rem "Page 1 $D000-$DFFF":cursor off 2160          try bload a$,$7800 to ec2170          if ec<>02175          a$="File "+a$+" Not Found!":statmsg(a$):restorespr():goto 5002177          endif 2180          a$="Palette File "+a$+" Loaded":statmsg(a$)2185          ?1=1:for c=0 to 1023:?($D000+c)=?($7800+c):next :?1=02190          restorespr()2200          goto 5002210          endif 2220          if xc<56:rem "SAVE PALETTE"2230          cls :cursor on :input "Palette file Name to Save (.PAL will be added):";a$2240          hidespr():a$=a$+".PAL":cursor off :rem "Page 1 $D000-$DFFF":2250          ?1=1:for c=0 to 1023:?($7800+c)=?($D000+c):next :?1=02260          try bsave a$,$7800,1024 to ec2265          if ec<>02267          a$="Save error, check drive!":statmsg(a$):restorespr():goto 5002268          endif 2270          restorespr()2275          a$="Palette File "+a$+" Saved":statmsg(a$)2280          goto 5002290          endif 2295          endif 2300          if xc<3:rem "PROCESS GENERAL MENU ITEMS"2302          getmouse()2303          if mb1<>0 then goto 23022305          if yc>38 then goto 5002310          if ptry>166:rem "EXIT NICELY"2320          bitmap off :cls :print "Thx for using the Sprite Editor!"2330          for c=0 to 7:movespr(c,0,0):next :cursor on :a$="toolkit.bas"2332          memcopy $28000,$8000 poke 02335          print "loading ";a$:bload a$,$28000:xgo 2337          end 2340          endif 2350          if ptry>148:rem "MOVE TO PREVIOUS SPRITE"2360          processjoy():if b1=1 then goto 23602370          if scount>02380          selectspr(scount-1)2400          a$="Editing Sprite "+str$(scount+1):statmsg(a$)2420          call sprshow2430          else 2440          processjoy():if b1=1 then goto 24402450          a$="Already at First Sprite "+str$(scount+1)+"!":statmsg(a$)2460          endif 2470          goto 5002480          endif 2570          if ptry>133:rem "MOVE TO NEXT SPRITE"2580          processjoy():if b1=1 then goto 25802590          if scount<smax2610          selectspr(scount+1)2620          a$="Editing Sprite "+str$(scount+1):statmsg(a$)2630          call sprshow2640          else 2660          a$="Already at Last Sprite "+str$(scount+1)+"!":statmsg(a$)2670          endif 2680          goto 5002690          endif 2790          if ptry>117:rem "DELETE LAST SPRITE"2800          processjoy():if b1=1 then goto 28002810          if smax>02820          selectspr(smax)2910          call sprshow2920          statmsg("Press button/enter to delete sprite, move stick or press other key to cancel.")2930          k=inkey():processjoy():if x#+y#+b1+k=0 then goto 29302940          if k=13 then goto 29602950          if b1=12960          a$="Deleting Sprite "+str$(scount+1)+"..."2970          smax=smax-12975          selectspr(smax)2980          goto 2630:rem "call next sprite routine"2990          else 3000          statmsg("Operation Canceled.")3010          endif 3020          else 3030          statmsg("Can't delete first sprite")3040          endif 3050          goto 5003060          endif 3070          if ptry>100:rem "ADD SPRITE"3080          processjoy():if b1=1 then goto 30803090          if scount<5123100          if scount<>smax then selectspr(smax):rem "go to last sprite"3120          smax=smax+1:rem "add one more sprite"3130          d=address+(size*size)3140          pokel long,d:poke long,(peek(long)+sprsize)3150          memcopy long,3 to $30000+(smax*3)3170          selectspr(smax):call sprshow:setspr(2,work2,sz,1) rem "go to new last sprite"3180          a$="Editing Sprite "+str$(scount+1):statmsg(a$)3190          goto 5003200          else 3210          a$="Max number of Sprites ("+str$(scount)+") Reached!":statmsg(a$)3220          goto 5003230          endif 3240          endif 3300          if ptry>82:rem "Sprite SIZE"3330          if scount=smax3340          a$="Press Key for size 0-8x8, 1-16x16, 2-24x24, 3-32x32, Enter to cancel":statmsg(a$)3350          k=inkey():if k=0 then goto 33503360          if k=13 then a$="Resize Cancelled.":statmsg(a$):goto 5003370          if k>51 then goto 33503380          if k<48 then goto 33503390          size=8+(k-48)*8:sz=4-(size\8):sprsize=(size\8)-1:rem "sz 3=8,2=16,1=24,0=32"3400          pokel long,address+sprsize3410          memcopy long,3 to $30000+(scount*3)3440          ml_routines():clrarea(size):setspr(2,work2,sz,1):grid=03450          a$=str$(grid&3):printat(36,48,a$)3460          goto 1410:rem "Clear sprite after resizing"3470          else a$="Sorry, You can only resize the last sprite":statmsg(a$):goto 5003480          endif 3490          endif 3500          if ptry>68:rem "LOAD----------"3505          presize=size3510          cls :cursor on :input "Type Filename to Load (.SPR will be added):";a$3520          a$="sprites/"+a$+".SPR":try bload a$,$2FFFF to ec:cursor off 3530          if ec<>0 then a$="File "+a$+" not found, try again":statmsg(a$):goto 5003540          xpeek($2FFFF):smax=peekvalue:rem "set # of sprites loaded"3550          a$="Loaded "+str$(smax+1)+" Sprites from "+a$:statmsg(a$)3560          memcopy $30000+(index*3),3 to long3570          sprsize=peek(long)&33580          address=peekl(long)-sprsize3590          size=sprsize*8+8:sz=3-sprsize3595          memcopy address,size*size to work23600          if presize<>size3610          ml_routines():clrarea(size):grid=0:a$=str$(grid&3):printat(36,48,a$)3615          setspr(2,work2,sz,1)3620          endif 3625          call sprshow3630          goto 5003640          endif 3650          if ptry>52:rem "SAVE----------"3660          selectspr(smax)3670          call sprshow3680          xpoke($2FFFF,smax)3690          d=address+(size*size):rem "calculate end address"3700          cls :cursor on :input "Type a Filename to save as (.SPR will be added):";a$3710          a$="sprites/"+a$+".SPR":try bsave a$,$2FFFF,d-$2FFFF to ec:cursor off 3720          if ec<>0 then a$="Error saving "+a$+"!, try again":statmsg(a$):goto 5003730          a$=a$+" Saved....  "+str$(d-$2FFFF)+" Bytes":statmsg(a$)3740          endif 3750          goto 5003760          endif 3850          if xc<4 then goto 5003860          if xc<12:rem "SELECT COLOR"3870          if yc>23880          if (yc=yprev)&(xc=xprev) then goto 5003890          n=((xc)-4)+8*((yc)-3)3900          switchcolor(n)3910          yprev=yc:xprev=xc3920          goto 5003930          endif 3940          endif 3950          if xc=12 then goto 5003960          if xc<=12+size:rem "DRAW IN SPRITE AREA"3970          if yc>23980          if (yc=yprev)&(xc=xprev) then goto 40903990          for c=0 to brush4000          for d=0 to brush4010          if xc+c>12+size then goto 40604020          if yc+d>2+size then goto 40604030          px=(xc+c)*sx:py=(yc+d)*sy4040          rect solid px+1,py+1 color col to px+sx-1,py+sy-14050          poke work2+(xc+c-13)+(yc+d-3)*size,col4060          next :rem "2700"4070          next 4080          yprev=yc:xprev=xc4090          endif :rem "2730"4100          goto 5004110          endif 4120          rem "Pick color using spaceBar"4130          if b2<>04131          getmouse()4132          if mb2=0 then goto 41504133          endif 4140          k$=inkey$():if k$=""then goto 5004145          if k$=" "4150          getcolorpixel(ptrx-32,ptry-32)4155          xprev=int((ptrx-32)/sx):yprev=int((ptry-32)/sy)4160          if n=3 then getcolorpixel(ptrx-31,ptry-31):rem "try to avoid getting color from grid"4170          switchcolor(n)4175          endif 4180          goto 5004190          '	"------------END MAIN LOOP ---"5000          proc ml_routines()5010          local mainx,pos0x,pos1x,po2x,pos3x,srow,cnt,sqsize,endroutinex,endmirrorx5020          local mainy,pos0y,pos1y,po2y,pos3y,endroutiney,endmirrory5030          local firstrow,looprowsu,loopcolsu,pos0su,lastrow5040          local firstrowd,looprowsd,loopcolsd,pos0sd,lastrowd5050          local loopri,looprowsr,loopcolsr,pos0sr,loopri2,posri05060          local loople,looprowsl,loopcolsl,pos0sl,loople2,posle05070          local loop1,scradd,samerow,nextrow,cleanup,sadd,retadd5080          local whi,wlo,whe,wle,work3,asize,hsize,dsize,osize5090          asize=size-1:hsize=size\2:dsize=size*2:osize=(32-size)*55100          mlroutines=$7C005110          whi=work2\256:wlo=work2&$FF5120          work3=work2+(size*size)-size:whe=work3\256:wle=work3&$FF5130          for c=0 to 15140          assemble mlroutines,c5150          .srow nop 5160          .cnt nop 5170          .sqsize nop 5180          .mirrorx ldy #$005190          ldx #size5200          stx srow5210          ldx #asize:rem "counter to 31"5220          .mainx sty cnt5230          .pos0x lda work2,x:rem "Swap bytes from opposite x corners"5240          pha 5250          .pos1x lda work2,y5260          .pos2x sta work2,x5270          pla 5280          .pos3x sta work2,y5290          iny :rem "move counters"5300          dex 5310          clc 5320          inc cnt5330          lda cnt5340          cmp #hsize5350          bne mainx5360          dec srow5370          lda srow5380          cmp #$005390          beq endroutinex5400          clc 5410          lda #size5420          adc pos0x+1:rem "Move to next sprite's row address"5430          sta pos0x+15440          sta pos1x+15450          sta pos2x+15460          sta pos3x+15470          lda #005480          adc pos0x+25490          sta pos0x+25500          sta pos1x+25510          sta pos2x+25520          sta pos3x+25530          ldy #$005540          ldx #asize5550          jmp mainx5560          .endroutinex lda #wlo:rem "Restore pointers in code"5570          sta pos0x+15580          sta pos1x+15590          sta pos2x+15600          sta pos3x+15610          lda #whi5620          sta pos0x+25630          sta pos1x+25640          sta pos2x+25650          sta pos3x+25660          .endmirrorx rts 5670          rem "Routine for MirrorY"5680          rem "--------------------------------"5690          .mirrory ldy #hsize5700          .mainy ldx #$00:rem "clear counter"5710          .pos0y lda work2,x:rem "Swap bytes from top / bottom"5720          pha 5730          .pos1y lda work3,x5740          .pos2y sta work2,x5750          pla 5760          .pos3y sta work3,x5770          inx 5780          cpx #size5790          bne pos0y5800          dey :rem "Decrease counter of row to process.."5810          cpy #$005820          beq endroutiney5830          clc 5840          lda #size5850          adc pos0y+1:rem "Move to next sprite's row address"5890          sta pos0y+15900          sta pos2y+15910          lda #$005920          adc pos0y+25930          sta pos0y+25940          sta pos2y+25950          sec 5960          lda pos1y+15970          sbc #size5980          sta pos1y+15990          sta pos3y+16000          lda pos1y+26010          sbc #006020          sta pos1y+26030          sta pos3y+26040          jmp mainy6050          .endroutiney lda #wlo:rem "Restore pointers in code"6060          sta pos0y+16070          sta pos2y+16080          lda #whi6090          sta pos0y+26100          sta pos2y+26110          lda #wle6120          sta pos1y+16130          sta pos3y+16140          lda #whe6150          sta pos1y+26160          sta pos3y+26170          .endmirrory rts 6180          rem "---------------------------------------"6190          .sprshow lda $E6200          pha 6210          lda #86220          sta $E6230          ldx #46240          stx $16250          stx sqsize6260          ldy #006270          stz srow6280          .loop1 lda work2,y6290          .scradd sta $D441,x6300          dex 6310          cpx #006320          bne loop16330          iny 6340          cpy #size6350          beq samerow6360          lda #56370          jsr sadd6380          ldx #46390          jmp loop16400          .samerow ldx sqsize6410          dex 6420          cpx #006430          beq nextrow6440          stx sqsize6450          lda #1656460          jsr sadd6470          lda #osize6480          jsr sadd6490          ldy #006500          ldx #46510          jmp loop16520          .nextrow ldx srow6530          inx 6540          stx srow6550          cpx #size6560          beq cleanup6570          lda #2436580          jsr sadd6590          lda #2426600          jsr sadd6610          lda #osize6620          jsr sadd6630          ldy #006640          ldx #46650          stx sqsize6660          clc 6670          lda #size6680          adc loop1+16690          sta loop1+16700          lda #06710          adc loop1+26720          sta loop1+26730          clc 6740          jmp loop16750          .cleanup stz $16760          pla 6780          sta $E6790          lda #$416800          sta scradd+16810          lda #$D46820          sta scradd+26830          lda #wlo6840          sta loop1+16850          lda #whi6860          sta loop1+26870          clc 6880          rts 6890          .sadd clc 6900          adc scradd+16910          sta scradd+16920          lda #06930          adc scradd+26940          sta scradd+26950          cmp #2246960          bmi retadd6970          lda #1926980          sta scradd+26990          inc $E7000          .retadd clc 7010          rts 7020          next 7030          endproc 10000         '	"----------- PROCEDURES"10010         proc sprcursor()10020         sx=5:sy=510030         for c=0 to sx:add=work2+c:poke add,255:next 10040         for c=1 to sy-1:add=work2+c*16:?add=255:?(add+sx)=255:next 10050         for c=0 to sx:add=work2+c+(sy*16):poke add,255:next 10060         for c=0 to 255:read b:poke work2+$100+c,b:next 10070         endproc 10100         proc setspr(num,mem,sz,show)10110         rem "size: 0=32x32, 1=24x24, 2=16x16, 3=8x8"10120         local shi:local smd:local slo:local sval:local sp10130         shi=mem\65536:smd=((mem-(shi*65536))\256):slo=(mem&$FF)10140         ?1=0:sp=$D900:sp=sp+(num*8)10150         sz=sz&3:sval=sz*32+(show&1)10160         ?sp=sval10170         ?(sp+1)=slo:?(sp+2)=smd:?(sp+3)=shi10180         endproc 10200         proc showspr(num,show,sz)10210         rem "show: 1=Show, 2=Hide"10220         ?1=0:local sp10230         sp=$D900:sp=sp+(num*8)10240         sz=sz&3:sval=sz*32+(show&1)10250         ?sp=sval10260         endproc 10300         proc movespr(num,x,y)10310         ?1=0:local sp10320         sp=$D900:sp=sp+(num*8)10330         ?(sp+4)=x&$FF:?(sp+5)=int(x/256)10340         ?(sp+6)=y&$FF:?(sp+7)=int(y/256)10350         endproc 10360         proc drawpal()10370         xi=0:xf=0:yi=0:yf=0:xo=sx*4:yo=sy*3:i=010380         for b=0 to 3110390         for c=0 to 710400         xi=(c*sx)+(xo+1)10410         xf=((c+1)*sx)+xo10420         yi=(b*sy)+(yo+1)10430         yf=((b+1)*sy)+yo10440         rect solid xi,yi color i to (xf-1),(yf-1)10450         i=i+110460         next 10470         next 10480         endproc 10500         proc xpoke(addr,value)10510         local block:block=addr\8192:local prevblock:rem "calculate block"10520         local offset:offset=addr-(block*8192):rem "Calculate offset"10530         ?0=179:rem "Enable Edit on Memory LUT 0"10540         prevblock=?$E:rem "Save old block under I/O"10550         ?$E=block:rem "Map memory under I/O block to $30000"10560         ?1=4:rem "enable access to ram under I/O block (7th block!)"10570         ?($C000+offset)=value10580         ?1=0:rem "Set I/O access on block 7"10590         ?$E=prevblock:rem "Restore previous memory block under I/O"10600         endproc 10650         proc clrarea(size)10660         xo=sx*1310670         rect xo,yo solid color 0 to (xo+sx*32),(yo+sy*32)10680         for b=0 to size10690         line (xo+b*sx),yo color 3 to (xo+b*sx),(yo+sy*size)10700         line xo,(yo+b*sy) color 3 to (xo+sx*size),(yo+sy*b)10710         next 10720         endproc 10750         proc switchcolor(n)10760         col=n:?1=1:l=$D000:l=l+(col*4)10780         if col<>010790         colb=?l:colg=?(l+1):colr=?(l+2)10800         else 10810         ?1=0:colb=?$D00D:colg=?$D00E:colr=?$D00F10820         endif 10830         movespr(5,sx*4+colr+32,sy*40+32)10840         movespr(6,sx*4+colg+32,sy*42+32)10850         movespr(7,sx*4+colb+32,sy*44+32)10860         movespr(1,(((col&7)+4)*sx+32),((int(col/8)+3)*sy+32))10890         rect (sx*4),(sy*36) color n to (sx*12),(sy*39)-210900         a$="Red:"+right$("00"+str$(colr),3)+" "10910         a$=a$+"Green:"+right$("00"+str$(colg),3)+" "10920         a$=a$+"Blue:"+right$("00"+str$(colb),3)+"      "10930         printat(5,58,a$):a$=right$("00"+str$(col),3):printat(5,49,"Color:"+a$)10940         ?1=010950         endproc 10960         proc processjoy()10970         local j:?1=010980         if x#<>0m#=m#+0.08 else if y#<>0 then m#=m#+0.08 endif 10990         if m#>3 then m#=311000         j=?($DC00):b1=0:x#=0:y#=011010         if j=255 then x#=0:y#=0:m#=0:goto 1108011020         if (j&1)=0 then y#=-1-m#:rem "UP"11030         if (j&2)=0 then y#=1+m#:rem "DOWN"11040         if (j&4)=0 then x#=-1-m#:rem "LEFT"11050         if (j&8)=0 then x#=1+m#:rem "RIGHT"11060         if (j&16)=0 then b1=1:rem "BUTTON1"11070         if b1=1 then if m#>=1 then m#=011080         endproc 11100         proc printat(x,y,a$)11110         local pos:pos=x+y*80:?1=2:rem "Set I/O to text memory"11120         for c=0 to len(a$)-1:?(pos+c+$C000)=asc(mid$(a$,c+1,1)):next 11130         ?1=011140         endproc 11210         proc statmsg(b$)11220         printat(0,0,spc(80))11230         printat(0,0,b$)11240         endproc 11250         proc drawnexticon(x,y,col)11260         local c:local d:local e:local a11270         for c=0 to 1511280         for d=0 to 111290         read a11300         for e=0 to 711310         if a&128 then plot color col to d*8+e+x,c+y11320         a=a<<111330         next 11340         next 11350         next 11360         endproc 11370         proc xpeek(addr)11380         local block:block=addr\8192:local prevblock:rem "calculate block"11390         local offset:offset=addr-(block*8192):rem "Calculate offset"11400         ?0=179:rem "Enable Edit on Memory LUT 0"11410         prevblock=?$E:rem "Save old block under I/O"11420         ?$E=block:rem "Map memory under I/O block to $30000"11430         ?1=4:rem "enable access to ram under I/O block (7th block!)"11440         peekvalue=?($C000+offset)11450         ?1=0:rem "Set I/O access on block 7"11460         ?$E=prevblock:rem "Restore previous memory block under I/O"11470         endproc 11500         proc getcolorpixel(x,y)11510         c=$10000+(y*320)+x11520         xpeek(c)11530         n=peekvalue11540         endproc 11550         proc getmouse()11560         dx=0:dy=0:dz=0:mb1=0:mb2=0:mb3=011570         mouse c,c,c,mb1,mb2,mb311580         mdelta dx,dy,dz,c,c,c11585         dx=int(dx*mousespeed#):dy=int(dy*mousespeed#)11590         endproc 11600         proc upscroll()11610         local workrow11620         for c=1 to size:rowbuf(c)=peek(work2+c-1):next :rem "Store first row of data"11630         memcopy work2+size,(size*size)-size to work211640         workrow=work2+(size*size)-size11650         for c=1 to size:poke workrow+c-1,rowbuf(c):next :rem "Put first row of data"11660         endproc 11700         proc leftscroll()11710         for c=1 to size:rowbuf(c)=peek(work2+(c-1)*size):next :rem "Store first col of data"11720         memcopy work2+1,(size*size)-1 to work211730         for c=1 to size:poke work2+((c)*size)-1,rowbuf(c):next :rem "Put first col of data"11740         endproc 11750         proc hidespr()11780         memcopy work2,size*size to address11790         showspr(2,0,sz)11800         endproc 11850         proc restorespr()11880         memcopy address,size*size to work211890         showspr(2,1,sz)11900         endproc 11940         rem "---- selectspr procedure modifies value of scount!------"11950         proc selectspr(index)11960         presize=size11990         memcopy work2,size*size to address:rem "save current editing sprite to memory"12000         scount=index12005         memcopy $30000+(index*3),3 to long12010         sprsize=peek(long)&312020         if peekl(long)=0 then a$="Invalid Sprite &"+str$(index):statmsg(a$):goto 50012030         address=peekl(long)-sprsize12040         size=sprsize*8+8:sz=3-sprsize12060         if presize<>size12070         ml_routines():clrarea(size):setspr(2,work2,sz,1):grid=012080         a$=str$(grid&3):printat(36,48,a$)12090         endif 12100         memcopy address,size*size to work212110         endproc 20000         rem "PALETTE DATA"20005         data 0,0,0,0,0,0,32,32,32,64,64,64,96,96,96,128,128,12820010         data 160,160,160,200,200,200,98,93,84,133,117,10120020         data 158,140,121,174,161,137,187,175,164,204,195,177,234,219,20120030         data 255,243,214,88,49,38,115,61,59,136,80,65,154,98,7620040         data 173,110,81,213,141,107,251,170,132,255,206,127,0,39,5320050         data 0,56,80,0,77,94,11,102,127,0,111,137,50,140,16720060         data 36,174,214,136,214,255,102,43,41,148,54,58,182,77,7020070         data 205,94,70,227,120,64,249,155,78,255,188,78,255,233,7320080         data 40,43,74,58,69,104,97,95,132,122,119,153,134,144,17820090         data 150,178,217,199,214,255,198,236,255,000,34,25,0,50,3320100         data 23,74,27,34,89,24,47,105,12,81,136,34,125,164,4520110         data 166,204,52,024,31,47,35,50,77,37,70,107,54,107,13820120         data 049,142,184,65,178,227,82,210,255,135,234,253,26,51,4420130         data 47,63,56,56,81,64,50,92,64,65,116,85,73,137,9620140         data 85,182,125,145,218,161,94,7,17,130,33,34,182,60,6120150         data 228,92,93,255,118,119,255,155,156,255,187,189,255,219,22020160         data 43,49,71,64,71,90,87,92,112,110,115,136,132,138,15720170         data 168,174,194,192,199,219,227,234,255,70,24,19,94,46,4120180         data 138,82,77,174,107,96,199,130,108,216,151,117,236,169,13620190         data 255,194,171,49,34,42,74,53,60,94,70,70,114,90,8120200         data 126,108,84,158,138,110,192,165,136,221,191,154,76,10,3820210         data 96,31,61,118,54,89,151,84,117,185,109,145,193,120,17020220         data 219,153,191,248,186,218,0,46,73,0,64,81,0,81,9820230         data 0,107,109,0,130,121,0,160,135,0,191,163,0,222,21820240         data 69,49,37,97,74,60,126,97,68,153,121,81,178,144,9820250         data 204,169,110,232,203,130,251,234,163,95,23,38,110,36,5220260         data 144,70,71,167,96,87,181,116,108,206,141,132,226,160,14920270         data 253,189,178,50,53,88,74,82,128,100,101,157,120,119,19320280         data 142,140,226,156,155,239,184,174,255,220,212,255,145,23,4120290         data 157,43,59,196,59,82,217,74,105,248,93,128,255,141,17520300         data 255,166,197,255,188,209,73,37,28,99,52,50,124,75,7120310         data 152,95,90,172,114,110,187,134,129,210,157,151,229,173,16620320         data 041,62,0,62,79,10,73,93,27,91,105,38,113,116,4420330         data 150,141,47,180,170,65,208,204,86,98,42,0,117,59,920340         data 133,79,18,158,101,32,186,136,46,209,170,57,232,210,7520350         data 255,246,79,38,35,61,59,56,85,86,80,111,117,104,11020360         data 145,122,123,179,151,131,207,175,142,254,223,177,29,44,6720370         data 46,61,71,57,77,60,76,95,51,88,113,44,107,132,4520380         data 120,158,36,140,180,57,91,28,11,106,50,27,125,68,4620390         data 148,86,63,169,109,84,191,126,99,215,147,116,244,178,14720400         data 45,81,71,71,101,90,91,123,105,113,149,125,135,174,14620410         data 138,193,150,169,215,182,209,250,221,0,27,64,3,49,9520420         data 7,72,124,16,93,162,20,118,192,64,151,234,85,177,24120430         data 109,204,255,85,71,105,118,93,115,151,116,136,185,140,14720440         data 213,163,154,235,177,165,255,194,180,255,219,210,39,29,4820450         data 60,49,81,88,74,127,121,100,160,149,133,185,169,150,21820460         data 186,171,247,209,189,254,30,36,80,40,51,93,45,61,11420470         data 61,80,131,81,101,174,98,116,197,108,130,205,144,156,23520480         data 255,0,0,0,255,255,255,0,255,0,255,0,0,0,25520490         data 255,255,0,255,128,0,255,128,128,128,0,0,0,128,12820500         data 128,0,128,0,128,0,0,0,128,128,128,0,128,62,0,255,255,25520510         rem "16 x 16 Sprite Pointer Data"20520         data 0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,7,7,1,0,0,1,1,7,7,7,1,0,0,0,020540         data 1,7,7,7,1,1,7,7,7,1,4,7,1,0,0,0,1,4,7,7,7,7,1,4,7,7,7,7,1,0,0,020560         data 0,1,4,7,7,7,7,7,7,7,1,7,7,1,0,0,0,0,1,4,7,7,7,7,1,7,7,1,7,1,0,020580         data 0,0,1,1,4,7,7,7,7,1,7,7,7,1,1,0,0,0,1,4,1,4,7,7,7,7,7,7,1,7,7,120600         data 0,0,1,4,4,4,7,7,7,7,7,7,7,7,7,1,0,0,0,1,4,4,4,7,7,7,7,7,7,4,1,020620         data 0,0,0,0,1,4,4,4,4,1,7,7,4,1,0,0,0,0,0,0,0,1,1,1,1,4,7,4,1,0,0,020640         data 0,0,0,0,0,0,0,1,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0,1,4,4,1,0,0,0,0,020660         data 0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,020670         rem "ICONs Data"20680         data 0,0,255,224,224,96,235,100,224,108,127,223,251,191,241,223:rem "SAVE"20690         data 251,236,255,228,249,224,249,224,249,224,0,0,0,0,0,020700         data 0,0,255,224,224,96,235,96,224,104,127,140,251,190,241,191:rem "LOAD"20710         data 251,190,255,140,249,232,249,224,249,224,0,0,0,0,0,020713         data 224,0,236,0,237,192,13,192,125,222,125,222,1,222,63,222:rem "SIZE"20716         data 63,222,63,222,0,30,15,254,15,254,15,254,15,254,0,020720         data 0,0,0,4,0,4,0,31,0,4,96,100,144,144,63,192:rem "ADD"20730         data 118,224,182,208,191,208,176,208,25,128,0,0,0,0,0,020740         data 0,0,128,96,68,128,17,72,118,224,182,208,189,128,176,0:rem "DEL"20750         data 24,68,0,40,0,16,0,40,0,68,0,0,0,0,0,020760         data 0,0,7,0,4,128,124,64,64,32,64,16,64,48,124,112:rem "NEXT"20770         data 124,240,127,224,127,192,7,128,7,0,0,0,0,0,0,020780         data 0,0,7,0,9,0,17,240,32,16,64,16,96,16,113,240:rem "PREV"20790         data 121,240,63,240,31,240,15,0,7,0,0,0,0,0,0,020800         data 0,0,0,0,234,184,138,144,196,144,138,144,234,144,0,0:rem "EXIT"20810         data 0,64,0,96,15,240,15,248,15,240,0,96,0,64,0,020820         data 0,0,31,0,55,142,102,206,124,95,204,78,238,196,191,128:rem "SAVE Palette"20830         data 159,63,254,33,78,33,107,63,57,51,30,63,0,59,0,020840         data 0,0,31,0,55,132,102,206,124,95,204,78,238,206,191,128:rem "LOAD Palette"20850         data 159,63,254,33,78,33,107,63,57,51,30,63,0,59,0,020860         data 0,0,0,30,0,60,0,120,1,176,3,192,3,192,3,128:rem "PEN"20870         data 4,0,0,0,44,140,13,222,0,158,0,12,0,0,0,020880         data 0,0,15,192,8,160,120,144,72,248,72,8,75,168,72,8:rem "COPY"20890         data 75,104,72,8,72,8,79,248,64,64,127,192,0,0,0,020900         data 0,0,15,0,57,192,79,32,64,32,64,0,65,254,65,2:rem "PASTE"20910         data 65,122,65,2,65,90,65,2,65,106,61,2,1,254,0,020920         data 0,0,42,170,64,0,0,1,64,0,29,29,81,20,17,25:rem "CLR"20930         data 81,20,29,213,64,0,0,1,64,0,42,170,0,0,0,020940         data 0,0,114,170,64,0,98,8,64,0,98,8,64,0,114,170:rem "GRID"20950         data 64,0,98,8,0,0,2,8,0,0,2,170,0,0,0,020960         data 0,0,2,0,6,0,14,0,30,0,62,0,102,48,74,88:rem "MIRROR X"20970         data 66,120,102,48,126,0,124,0,120,0,112,0,96,0,64,020980         data 0,0,0,0,0,192,1,224,1,96,0,192,0,0,3,255:rem "MIRROR Y"20990         data 7,62,14,156,30,24,63,48,127,224,0,0,0,0,0,021000         data 1,0,3,128,7,192,1,0,1,0,33,8,96,12,252,126:rem "MOVE"21010         data 96,12,33,8,1,0,1,0,7,192,3,128,1,0,0,021040         data 3,128,3,224,3,240,0,120,0,56,0,28,0,28,0,28:rem "ROTATE"21050         data 62,28,56,56,60,120,63,240,47,224,35,128,0,0,0,0