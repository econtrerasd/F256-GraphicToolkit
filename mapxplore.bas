10    cls 20    peekloc=alloc(1):tx=20:ty=1530    setuptile():sizemap(tx,ty)40    input "File Name of Tile Set to load (.tile will be added):";a$50    loadtiles(0,a$)60    input "File name of tilemap to open (.map will be added):";a$70    loadmap(a$)80    cls 90    repeat 100   rem "Read keyboard commands to scroll map"110   k=inkey()120   if k=14:rem "scroll map down"130   if py+16<=ty140   for c=0 to 15:tilepos(px,py,0,c):next 150   py=py+1:tilepos(px,py,0,0)160   endif 165   endif 170   if k=16:rem "scroll map up"180   if py>0190   for c=15 downto 0:tilepos(px,py-1,0,c):next 200   py=py-1:tilepos(px,py,0,0)210   endif 215   endif 220   if k=6:rem "scroll map right"230   if px+20<tx240   for c=0 to 15:tilepos(px,py,c,0):next 250   px=px+1:tilepos(px,py,0,0)260   endif 265   endif 270   if k=2:rem "scroll map left"280   if px>0290   for c=15 downto 0:tilepos(px-1,py,c,0):next 300   px=px-1:tilepos(px,py,0,0)310   endif 320   endif 330   until k=113:rem "Press Q to Quit"340   poke $D000,3350   end 540   proc loadpalette(name$,n)550   name$=name$+".pal"560   try bload name$,$7900 to ec570   print "Loading ";name$580   if ec<>0590   print "File "+name$+" Not Found!"600   print "Using default palette.."610   loadpalette("default",1)620   endif 630   ?1=1:for c=0 to 1023:?($D000+c+n*$400)=?($7900+c):next :?1=0640   endproc 650   proc loadtiles(n,name$)660   memcopy $40000,$10000 poke 0670   a$=name$+".tile"680   cls :print "Loading ";name$690   try bload a$,$40100 to ec700   if ec<>0710   cls :print "Tile file "+name$+" not found!"720   end 730   endif 740   loadpalette(name$,1)750   endproc 760   proc loadmap(a$)770   m$=a$+"1.map":print m$;"...":try bload m$,$4FFFE to ec780   if ec<>0 then print "File ";m$;" not found!":end 790   m$=a$+"2.map":print m$;"...":try bload m$,$60000 to ec800   if ec<>0 then print "File ";m$;" not found!"810   m$=a$+"3.map":print m$;"...":try bload m$,$70000 to ec820   try bload a$+".pmap",$7900 to ec840   xpeek($4FFFE):tx=peekvalue850   xpeek($4FFFF):ty=peekvalue:sizemap(tx,ty)860   endif 870   endproc 890   proc showtiles(n,p):rem "n - tileset, p-page (0-5)"900   addr=$40000+(p*45*256):spa=$D918910   for c=0 to 2:rem "3 rows"920   for d=0 to 14:rem "15 tiles each"930   sn=3+c*15+d:sprite sn to 84+d*16,196+c*16940   pokel spa+1,addr:addr=addr+256950   poke spa,67:spa=spa+8:rem "1-on,2-lut 1,64-size 16"960   next 970   next 980   endproc 1000  proc setuptile()1005  poke $D000,631010  poke $D002,80:poke $D003,4:rem "turn on 2 tile layers"1020  memcopy $40000,$FFF0 poke 0:for c=1 to 200:next 1030  memcopy $50000,$FFF0 poke 0:for c=1 to 200:next 1040  memcopy $60000,$FFF0 poke 0:for c=1 to 200:next 1050  memcopy $70000,$FFF0 poke 0:for c=1 to 200:next 1060  poke $D200,1:for c=1 to 100:next 1070  poke $D20C,1:for c=1 to 100:next 1080  pokel $D101,$10000:poke $D100,1:for c=1 to 100:next 1090  pokel $D201,$50000:pokel $D20C+1,$600001100  pokel $D280,$40000:rem "set Tile graphics address"1110  tilepos(0,0,0,0)1120  endproc 1150  proc tilepos(tpx,tpy,sx,sy)1160  rem "Positions upper map corner at tpx, tpy, fine scroll sx,sy"1170  local txl,txh,tyl,tyh1180  txl=(tpx&$0F)*16:txh=(tpx&$F0)\161190  tyl=(tpy&$0F)*16:tyh=(tpy&$F0)\161200  poke $D208,txl+sx:poke $D209,txh1210  poke $D20C+8,txl+sx:poke $D20C+9,txh1220  poke $D20A,tyl+sy:poke $D20B,tyh1230  poke $D20C+$A,tyl+sy:poke $D20C+$B,tyh1240  endproc 1250  proc tilesoff()1260  cls 1270  ?1=0:poke $D218,0:for c=1 to 10:next 1280  poke $D20C,0:for c=1 to 10:next 1290  poke $D200,01300  bitmap off 1310  endproc 1320  proc sizemap(x,y)1330  poke $D204,x:poke $D20C+4,x1340  poke $D206,y:poke $D218+6,y1350  endproc 1600  proc xpeek(addr)1610  local block:block=addr\8192:local prevblock:rem "calcualte block"1620  local offset:offset=addr-(block*8192):rem "calculate offset"1630  ?0=179:rem "Enable edit on MLUT 0"1640  prevblock=?$0E:rem "save block under I/O"1650  ?$E=block:rem "map temp block under I/O memory"1660  ?1=4:peekvalue=?($C000+offset):?1=01670  ?$E=prevblock:rem "restore block under I/o"1680  endproc 